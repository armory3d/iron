package wings.w3d.importer.md2;

// Adapted from Foo3D Engine
// https://github.com/dazKind/foo3d

import haxe.io.Bytes;
import haxe.io.BytesInput;
import wings.math.Vec3;

// data structures
typedef Md2Model = { 
    header:Md2Header,
    triangles:Array<Md2Tri>, 
    uv:Array<Vec3>, 
    frames:Array<Md2Frame> 
};

typedef Md2Header = {
    skinWidth:Int,    
    skinHeight:Int,
    frameSize:Int,
    numSkins:Int,
    numVerts:Int,
    numSt:Int,
    numTris:Int,
    numGlCmds:Int,
    numFrames:Int,
    offsetSkins:Int,
    offsetSt:Int,
    offsetTris:Int,
    offsetFrames:Int,
    offsetGlCmds:Int,
    offsetEnd:Int
};

typedef Md2Tri = {
    vertInds:Array<Int>, 
    uvInds:Array<Int>
};

typedef Md2Frame = {
    name:String,
    scale:Vec3,
    translate:Vec3,
    verts:Array<Vec3>,
    normals:Array<Vec3>,
};

class Md2Parser {
    static var NORMALS:Array<Array<Float>> = [
        [ -0.525731,  0.000000,  0.850651 ], 
        [ -0.442863,  0.238856,  0.864188 ], 
        [ -0.295242,  0.000000,  0.955423 ], 
        [ -0.309017,  0.500000,  0.809017 ], 
        [ -0.162460,  0.262866,  0.951056 ], 
        [  0.000000,  0.000000,  1.000000 ], 
        [  0.000000,  0.850651,  0.525731 ], 
        [ -0.147621,  0.716567,  0.681718 ], 
        [  0.147621,  0.716567,  0.681718 ], 
        [  0.000000,  0.525731,  0.850651 ], 
        [  0.309017,  0.500000,  0.809017 ], 
        [  0.525731,  0.000000,  0.850651 ], 
        [  0.295242,  0.000000,  0.955423 ], 
        [  0.442863,  0.238856,  0.864188 ], 
        [  0.162460,  0.262866,  0.951056 ], 
        [ -0.681718,  0.147621,  0.716567 ], 
        [ -0.809017,  0.309017,  0.500000 ], 
        [ -0.587785,  0.425325,  0.688191 ], 
        [ -0.850651,  0.525731,  0.000000 ], 
        [ -0.864188,  0.442863,  0.238856 ], 
        [ -0.716567,  0.681718,  0.147621 ], 
        [ -0.688191,  0.587785,  0.425325 ], 
        [ -0.500000,  0.809017,  0.309017 ], 
        [ -0.238856,  0.864188,  0.442863 ], 
        [ -0.425325,  0.688191,  0.587785 ], 
        [ -0.716567,  0.681718, -0.147621 ], 
        [ -0.500000,  0.809017, -0.309017 ], 
        [ -0.525731,  0.850651,  0.000000 ], 
        [  0.000000,  0.850651, -0.525731 ], 
        [ -0.238856,  0.864188, -0.442863 ], 
        [  0.000000,  0.955423, -0.295242 ], 
        [ -0.262866,  0.951056, -0.162460 ], 
        [  0.000000,  1.000000,  0.000000 ], 
        [  0.000000,  0.955423,  0.295242 ], 
        [ -0.262866,  0.951056,  0.162460 ], 
        [  0.238856,  0.864188,  0.442863 ], 
        [  0.262866,  0.951056,  0.162460 ], 
        [  0.500000,  0.809017,  0.309017 ], 
        [  0.238856,  0.864188, -0.442863 ], 
        [  0.262866,  0.951056, -0.162460 ], 
        [  0.500000,  0.809017, -0.309017 ], 
        [  0.850651,  0.525731,  0.000000 ], 
        [  0.716567,  0.681718,  0.147621 ], 
        [  0.716567,  0.681718, -0.147621 ], 
        [  0.525731,  0.850651,  0.000000 ], 
        [  0.425325,  0.688191,  0.587785 ], 
        [  0.864188,  0.442863,  0.238856 ], 
        [  0.688191,  0.587785,  0.425325 ], 
        [  0.809017,  0.309017,  0.500000 ], 
        [  0.681718,  0.147621,  0.716567 ], 
        [  0.587785,  0.425325,  0.688191 ], 
        [  0.955423,  0.295242,  0.000000 ], 
        [  1.000000,  0.000000,  0.000000 ], 
        [  0.951056,  0.162460,  0.262866 ], 
        [  0.850651, -0.525731,  0.000000 ], 
        [  0.955423, -0.295242,  0.000000 ], 
        [  0.864188, -0.442863,  0.238856 ], 
        [  0.951056, -0.162460,  0.262866 ], 
        [  0.809017, -0.309017,  0.500000 ], 
        [  0.681718, -0.147621,  0.716567 ], 
        [  0.850651,  0.000000,  0.525731 ], 
        [  0.864188,  0.442863, -0.238856 ], 
        [  0.809017,  0.309017, -0.500000 ], 
        [  0.951056,  0.162460, -0.262866 ], 
        [  0.525731,  0.000000, -0.850651 ], 
        [  0.681718,  0.147621, -0.716567 ], 
        [  0.681718, -0.147621, -0.716567 ], 
        [  0.850651,  0.000000, -0.525731 ], 
        [  0.809017, -0.309017, -0.500000 ], 
        [  0.864188, -0.442863, -0.238856 ], 
        [  0.951056, -0.162460, -0.262866 ], 
        [  0.147621,  0.716567, -0.681718 ], 
        [  0.309017,  0.500000, -0.809017 ], 
        [  0.425325,  0.688191, -0.587785 ], 
        [  0.442863,  0.238856, -0.864188 ], 
        [  0.587785,  0.425325, -0.688191 ], 
        [  0.688191,  0.587785, -0.425325 ], 
        [ -0.147621,  0.716567, -0.681718 ], 
        [ -0.309017,  0.500000, -0.809017 ], 
        [  0.000000,  0.525731, -0.850651 ], 
        [ -0.525731,  0.000000, -0.850651 ], 
        [ -0.442863,  0.238856, -0.864188 ], 
        [ -0.295242,  0.000000, -0.955423 ], 
        [ -0.162460,  0.262866, -0.951056 ], 
        [  0.000000,  0.000000, -1.000000 ], 
        [  0.295242,  0.000000, -0.955423 ], 
        [  0.162460,  0.262866, -0.951056 ], 
        [ -0.442863, -0.238856, -0.864188 ], 
        [ -0.309017, -0.500000, -0.809017 ], 
        [ -0.162460, -0.262866, -0.951056 ], 
        [  0.000000, -0.850651, -0.525731 ], 
        [ -0.147621, -0.716567, -0.681718 ], 
        [  0.147621, -0.716567, -0.681718 ], 
        [  0.000000, -0.525731, -0.850651 ], 
        [  0.309017, -0.500000, -0.809017 ], 
        [  0.442863, -0.238856, -0.864188 ], 
        [  0.162460, -0.262866, -0.951056 ], 
        [  0.238856, -0.864188, -0.442863 ], 
        [  0.500000, -0.809017, -0.309017 ], 
        [  0.425325, -0.688191, -0.587785 ], 
        [  0.716567, -0.681718, -0.147621 ], 
        [  0.688191, -0.587785, -0.425325 ], 
        [  0.587785, -0.425325, -0.688191 ], 
        [  0.000000, -0.955423, -0.295242 ], 
        [  0.000000, -1.000000,  0.000000 ], 
        [  0.262866, -0.951056, -0.162460 ], 
        [  0.000000, -0.850651,  0.525731 ], 
        [  0.000000, -0.955423,  0.295242 ], 
        [  0.238856, -0.864188,  0.442863 ], 
        [  0.262866, -0.951056,  0.162460 ], 
        [  0.500000, -0.809017,  0.309017 ], 
        [  0.716567, -0.681718,  0.147621 ], 
        [  0.525731, -0.850651,  0.000000 ], 
        [ -0.238856, -0.864188, -0.442863 ], 
        [ -0.500000, -0.809017, -0.309017 ], 
        [ -0.262866, -0.951056, -0.162460 ], 
        [ -0.850651, -0.525731,  0.000000 ], 
        [ -0.716567, -0.681718, -0.147621 ], 
        [ -0.716567, -0.681718,  0.147621 ], 
        [ -0.525731, -0.850651,  0.000000 ], 
        [ -0.500000, -0.809017,  0.309017 ], 
        [ -0.238856, -0.864188,  0.442863 ], 
        [ -0.262866, -0.951056,  0.162460 ], 
        [ -0.864188, -0.442863,  0.238856 ], 
        [ -0.809017, -0.309017,  0.500000 ], 
        [ -0.688191, -0.587785,  0.425325 ], 
        [ -0.681718, -0.147621,  0.716567 ], 
        [ -0.442863, -0.238856,  0.864188 ], 
        [ -0.587785, -0.425325,  0.688191 ], 
        [ -0.309017, -0.500000,  0.809017 ], 
        [ -0.147621, -0.716567,  0.681718 ], 
        [ -0.425325, -0.688191,  0.587785 ], 
        [ -0.162460, -0.262866,  0.951056 ], 
        [  0.442863, -0.238856,  0.864188 ], 
        [  0.162460, -0.262866,  0.951056 ], 
        [  0.309017, -0.500000,  0.809017 ], 
        [  0.147621, -0.716567,  0.681718 ], 
        [  0.000000, -0.525731,  0.850651 ], 
        [  0.425325, -0.688191,  0.587785 ], 
        [  0.587785, -0.425325,  0.688191 ], 
        [  0.688191, -0.587785,  0.425325 ], 
        [ -0.955423,  0.295242,  0.000000 ], 
        [ -0.951056,  0.162460,  0.262866 ], 
        [ -1.000000,  0.000000,  0.000000 ], 
        [ -0.850651,  0.000000,  0.525731 ], 
        [ -0.955423, -0.295242,  0.000000 ], 
        [ -0.951056, -0.162460,  0.262866 ], 
        [ -0.864188,  0.442863, -0.238856 ], 
        [ -0.951056,  0.162460, -0.262866 ], 
        [ -0.809017,  0.309017, -0.500000 ], 
        [ -0.864188, -0.442863, -0.238856 ], 
        [ -0.951056, -0.162460, -0.262866 ], 
        [ -0.809017, -0.309017, -0.500000 ], 
        [ -0.681718,  0.147621, -0.716567 ], 
        [ -0.681718, -0.147621, -0.716567 ], 
        [ -0.850651,  0.000000, -0.525731 ], 
        [ -0.688191,  0.587785, -0.425325 ], 
        [ -0.587785,  0.425325, -0.688191 ], 
        [ -0.425325,  0.688191, -0.587785 ], 
        [ -0.425325, -0.688191, -0.587785 ], 
        [ -0.587785, -0.425325, -0.688191 ], 
        [ -0.688191, -0.587785, -0.425325 ]
    ];

    static public function run(blob:kha.Blob):Md2Model {

        #if flash
        var _bytes = haxe.io.Bytes.ofData(blob.bytes);
        #else
        var _bytes = blob.toBytes();
        #end

        var res:Md2Model = { header:null, triangles:[], uv:[], frames:[] };

        var fin:BytesInput = new BytesInput(_bytes);

        if (fin.readString(4) != "IDP2" || fin.readInt32() != 8)
            throw "Unvalid MD2 file";

        res.header = {
            skinWidth:fin.readInt32(),
            skinHeight:fin.readInt32(),
            frameSize:fin.readInt32(),
            numSkins:fin.readInt32(),
            numVerts:fin.readInt32(),
            numSt:fin.readInt32(),
            numTris:fin.readInt32(),
            numGlCmds:fin.readInt32(),
            numFrames:fin.readInt32(),
            offsetSkins:fin.readInt32(),
            offsetSt:fin.readInt32(),
            offsetTris:fin.readInt32(),
            offsetFrames:fin.readInt32(),
            offsetGlCmds:fin.readInt32(),
            offsetEnd:fin.readInt32(),
        };

        var b:Bytes = _bytes.sub(res.header.offsetSt, res.header.numSt * 4);
        var r = new BytesInput(b);
        for (i in 0...res.header.numSt) {
            var uv:Vec3 = new Vec3(
                r.readInt16() / res.header.skinWidth,
                r.readInt16() / res.header.skinHeight,
                0
            );
            res.uv.push(uv);
        }

        // tris
        b = _bytes.sub(res.header.offsetTris, res.header.numTris * 12);
        r = new BytesInput(b);
        for (i in 0...res.header.numTris) {
            var t:Md2Tri = {
                vertInds:[ 0, 0, 0 ],
                uvInds:[ 0, 0, 0 ]
            };

            // reverse winding order
            t.vertInds[2] = r.readInt16();
            t.vertInds[1] = r.readInt16();
            t.vertInds[0] = r.readInt16();

            t.uvInds[2] = r.readInt16();
            t.uvInds[1] = r.readInt16();
            t.uvInds[0] = r.readInt16();

            res.triangles.push(t);
        }

        // frames
        b = _bytes.sub(
            res.header.offsetFrames, 
            res.header.numFrames * (40 + (res.header.numVerts * 4))
        );
        r = new BytesInput(b);
        for (i in 0...res.header.numFrames) {
            var frame = {
                name:"",
                scale:new Vec3(),
                translate:new Vec3(),
                verts:[],
                normals:[]
            };

            frame.scale.x = r.readFloat();
            frame.scale.y = r.readFloat();
            frame.scale.z = r.readFloat();

            frame.translate.x = r.readFloat();
            frame.translate.y = r.readFloat();
            frame.translate.z = r.readFloat();

            frame.name = r.readString(16);

            for (j in 0...res.header.numVerts)
            {
                var iX:Int = r.readByte();
                var iY:Int = r.readByte();
                var iZ:Int = r.readByte();
                var iN:Int = r.readByte();

                frame.verts.push(new Vec3(
                    (frame.scale.y * iY) + frame.translate.y,
                    (frame.scale.z * iZ) + frame.translate.z,
                    (frame.scale.x * iX) + frame.translate.x
                ));

                frame.normals.push(new Vec3(
                    NORMALS[iN][1],
                    NORMALS[iN][2],
                    NORMALS[iN][0]
                ));
            }
            res.frames.push(frame);
        }

        return res;
    }
}
